function [PredictedAction] = classifyEMG_1(x,fs) %#codegen
% This function extracts predetermined features from raw EMG signal of 8
% channels and uses a pretrained classifier to classifer the hand position
% corresponding to the EMG signals.

% Retrieve the compact classifier model
EMGClassifier = loadCompactModel('myClassifier.mat');

% Extract the features from the signal
feat = generateFeatures(x,fs);

% Apply the EMG classifier and retrieve the correct label
n = predict(EMGClassifier,feat);
labels = {...
    'Chuck Grip','Fine Pinch','H. Open','Hook Grip','Key Grip',...
    'No Move','Power Grip','Thumb Enclosed','Tool Grip','W. Abduction',...
    'W. Adduction','W. Extension','W. Flexion','W. Pronation','W. Supination'};
PredictedAction = labels{n};
end

function feat = generateFeatures(x,fs)
% Get standard deviation of the signal as feature
stdev = std(x);

% Get total power of the signal
[pxx,f] = periodogram(x,[],[],fs);
tpwr = trapz(f,pxx,1);


% Preprocessing to remove offset and rectify the raw signal
x = abs(detrend(x));

% Find the linear envelope using a low pass filter (8 columns)
lp = LPFilter;
envavg = mean(filter(lp,x));

feat = [stdev, envavg, tpwr];

end

function Hd = LPFilter
%LPFILTER Returns a discrete-time filter object.

% MATLAB Code
% Generated by MATLAB(R) 9.2 and the DSP System Toolbox 9.4.
% Generated on: 13-Mar-2017 14:39:45

% Butterworth Lowpass filter designed using FDESIGN.LOWPASS.

% All frequency values are in Hz.
Fs = 1800;  % Sampling Frequency

N  = 2;   % Order
Fc = 15;  % Cutoff Frequency

% Construct an FDESIGN object and call its BUTTER method.
h  = fdesign.lowpass('N,F3dB', N, Fc, Fs);
Hd = design(h, 'butter');

% [EOF]
end